{"name":"Spring ROO DB Reverse Engineering","tagline":"Spring ROO DB Reverse Engineering","body":"DB Reverse Engineering\r\n==================\r\n\r\nThis a quick tutorial on how create your application using one of the very impressive feature of Spring ROO, the DBRE.  In fact, this feature is not new for most of the developers.  JPA offers this but only allows you to instrospect the db schema and produce Java application once while Roo's version gives you the advantage of repeatedly doing it (re-instrospect and update the application).  Here, we are gonna create a sample project to demonstrate how DBRE works.\r\n\r\nRequirements:\r\n\r\n1. PostgreSQL\r\n2. Spring ROO, latest version is 1.2.5\r\n\r\nSteps:\r\n\r\n1.\tIf you haven't installed Spring ROO yet, then download it here http://projects.spring.io/spring-roo. \t\r\n2.\tExtract it to your favorite directory and add it to your PATH system variable.  In OSX you can add PATH in <b>.profile</b> at your home directory.\r\n\t\r\n\t```\r\n\texport ROO_HOME=\"/Users/<your-home-directory>/spring-roo-1.2.5.RELEASE\"\r\n\texport PATH=\"$PATH:$ROO_HOME/bin\"\r\n\t```\r\n\t\t\r\n3.\tDownload and install PostgreSQL. http://www.postgresql.org/download\r\n4.\tUsing PgAdmin or terminal create a database\r\n5.\tUse the sql below to create tables on your db.\r\n\r\n\t```\r\n\tDROP TABLE IF EXISTS account;\r\n\tDROP TABLE IF EXISTS salary;\r\n\tDROP TABLE IF EXISTS employee;\r\n\tDROP TABLE IF EXISTS user_role;\r\n\tDROP TABLE IF EXISTS account_roles;\r\n\t\r\n\tCREATE TABLE account\r\n\t(\r\n\t  id bigserial NOT NULL,\r\n\t  enabled boolean,\r\n\t  password character varying(255),\r\n\t  username character varying(255),\r\n\t  version integer,\r\n\t  CONSTRAINT account_pkey PRIMARY KEY (id )\r\n\t)\r\n\tWITH (\r\n\t  OIDS=FALSE\r\n\t);\r\n\tALTER TABLE account OWNER TO postgres;\r\n\t\r\n\tCREATE TABLE salary\r\n\t(\r\n\t  id bigserial NOT NULL,\r\n\t  code character varying(255) NOT NULL,\r\n\t  description character varying(255),\r\n\t  version integer,\r\n\t  CONSTRAINT salary_pkey PRIMARY KEY (id )\r\n\t)\r\n\tWITH (\r\n\t  OIDS=FALSE\r\n\t);\r\n\tALTER TABLE salary OWNER TO postgres;\r\n\t\r\n\tCREATE TABLE user_role\r\n\t(\r\n\t  id bigserial NOT NULL,\r\n\t  role_name character varying(255),\r\n\t  version integer,\r\n\t  CONSTRAINT user_role_pkey PRIMARY KEY (id )\r\n\t)\r\n\tWITH (\r\n\t  OIDS=FALSE\r\n\t);\r\n\tALTER TABLE user_role OWNER TO postgres;\r\n\t\r\n\tCREATE TABLE employee\r\n\t(\r\n\t  id bigserial NOT NULL,\r\n\t  address character varying(255) NOT NULL,\r\n\t  first_name character varying(255) NOT NULL,\r\n\t  last_name character varying(255) NOT NULL,\r\n\t  middle_name character varying(255) NOT NULL,\r\n\t  version integer,\r\n\t  salary bigint,\r\n\t  CONSTRAINT employee_pkey PRIMARY KEY (id ),\r\n\t  CONSTRAINT fk_trifo3miwmqe2tl40vjxqx8u9 FOREIGN KEY (salary)\r\n\t      REFERENCES salary (id) MATCH SIMPLE\r\n\t      ON UPDATE NO ACTION ON DELETE NO ACTION\r\n\t)\r\n\tWITH (\r\n\t  OIDS=FALSE\r\n\t);\r\n\tALTER TABLE employee OWNER TO postgres;\r\n\t\r\n\tCREATE TABLE account_roles\r\n\t(\r\n\t  account bigint NOT NULL,\r\n\t  roles bigint NOT NULL,\r\n\t  CONSTRAINT account_roles_pkey PRIMARY KEY (account , roles ),\r\n\t  CONSTRAINT fk_7dw3qmgby3x1lcjp7ijts8fa5 FOREIGN KEY (roles)\r\n\t      REFERENCES user_role (id) MATCH SIMPLE\r\n\t      ON UPDATE NO ACTION ON DELETE NO ACTION,\r\n\t  CONSTRAINT fk_avjbyhyjd6nnh52cr6ij2pujp FOREIGN KEY (account)\r\n\t      REFERENCES account (id) MATCH SIMPLE\r\n\t      ON UPDATE NO ACTION ON DELETE NO ACTION\r\n\t)\r\n\tWITH (\r\n\t  OIDS=FALSE\r\n\t);\r\n\tALTER TABLE account_roles OWNER TO postgres;\r\n\t```\r\n\r\n5.\tOn your machine create a new directory for your project e.g. <b>dbresample</b> then go to that newly created folder.\r\n6.\tOpen your ROO shell by typing <b>roo</b> in your console.\r\n\r\n\t```\r\n\tdbresample $ roo\r\n\t```\r\n7.\tType the following roo commands in your console.\r\n\r\n\t```\r\n\troo> project --topLevelPackage com.sample\r\n\troo> jpa setup --database POSTGRES --provider HIBERNATE \r\n\t\t--databaseName <name-of-your-db> \r\n\t\t--userName <your-db-username> \r\n\t\t--password <your-db-password> \r\n\troo> database introspect --schema public \r\n\troo> database reverse engineer --schema public --package ~.domain --activeRecord\r\n\t```\r\n\tSuccesful execution of the above commands will produce the following output in your shell.\r\n\t\r\n\t```\r\n\troo> database reverse engineer --schema public --package ~.domain --activeRecord\r\n\tCreated SRC_MAIN_RESOURCES/dbre.xml\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Account.java\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Employee.java\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Salary.java\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/UserRole.java\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Account_Roo_ToString.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Account_Roo_DbManaged.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Account_Roo_Jpa_Entity.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Employee_Roo_ToString.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Employee_Roo_DbManaged.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Employee_Roo_Jpa_Entity.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Salary_Roo_ToString.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Salary_Roo_DbManaged.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/Salary_Roo_Jpa_Entity.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/UserRole_Roo_ToString.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/UserRole_Roo_DbManaged.aj\r\n\tCreated SRC_MAIN_JAVA/com/sample/domain/UserRole_Roo_Jpa_Entity.aj\r\n\t```\r\n8.\tIn case that you encounter error about the missing <b>roo addon</b> use these commands to fix it. In this example it will look for <b>jdbc postgresql addon.</b>\r\n\r\n\t```\r\n\troo> addon search jdbc\r\n\troo> addon install id --searchResultId <ID of the addon>\r\n\t```\r\n\tExample:\r\n\t\r\n\t```\r\n\troo> addon search jdbc\r\n\t8 found, sorted by rank; T = trusted developer; R = Roo 1.2 compatible\r\n\tID T R DESCRIPTION\r\n\t01 Y Y 1.2.4.0010 #jdbcdriver driverclass:net.sourceforge.jtds.jdbc.Driver.\r\n\t       This bundle wraps the standard Maven artifact: jtds-1.2.4.\r\n\t02 Y Y 5.1.18.0001 #jdbcdriver driverclass:com.mysql.jdbc.Driver. This bundle\r\n\t       wraps the standard Maven artifact: mysql-connector-java-5.1.18.\r\n\t03 Y Y 10.8.2.2_0001 Derby Client #jdbcdriver\r\n\t       driverclass:org.apache.derby.jdbc.ClientDriver. This bundle wraps the...\r\n\t04 Y Y 6.7.0.0010 #jdbcdriver driverclass:com.ibm.as400.access.AS400JDBCDriver.\r\n\t       This bundle wraps the standard Maven artifact: jtopen-6.7.\r\n\t05 Y Y 10.8.2.2_0001 Derby #jdbcdriver\r\n\t       driverclass:org.apache.derby.jdbc.EmbeddedDriver. This bundle wraps...\r\n\t06 Y Y 9.1.0.901_0001 Postgres #jdbcdriver driverclass:org.postgresql.Driver.\r\n\t       This bundle wraps the standard Maven artifact:...\r\n\t07 Y Y 1.3.170.0001 H2 #jdbcdriver driverclass:org.h2.Driver. This bundle wraps\r\n\t       the standard Maven artifact: h2-1.3.170.\r\n\t08 Y Y 2.1.6.0020 #jdbcdriver driverclass:org.firebirdsql.jdbc.FBDriver. This\r\n\t       bundle wraps the standard Maven artifact: firebird-2.1.6.\r\n\troo> addon install id --searchResultId 06\r\n\t```\r\n\t\r\n\tRun the commands again on step 7.\r\n10.\tDownload or clone the project \"dbresample\" if you want to see the working sample.\r\n\r\n\r\n<b>Related document(s):</b>\r\n\r\nhttp://docs.spring.io/spring-roo/reference/html","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}